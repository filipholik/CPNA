/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Table.proto */

#ifndef PROTOBUF_C_Table_2eproto__INCLUDED
#define PROTOBUF_C_Table_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct TablesListRequest TablesListRequest;
typedef struct TablesListReply TablesListReply;
typedef struct TableDefinition TableDefinition;
typedef struct TableListRequest TableListRequest;
typedef struct TableListReply TableListReply;
typedef struct TableEntryGetRequest TableEntryGetRequest;
typedef struct TableEntryGetReply TableEntryGetReply;
typedef struct TableEntryInsertRequest TableEntryInsertRequest;
typedef struct TableEntryInsertReply TableEntryInsertReply;
typedef struct TableEntryDeleteRequest TableEntryDeleteRequest;
typedef struct TableEntryDeleteReply TableEntryDeleteReply;


/* --- enums --- */

typedef enum _TableDefinition__TableType {
  TABLE_DEFINITION__TABLE_TYPE__UNSPEC = 0,
  TABLE_DEFINITION__TABLE_TYPE__HASH = 1,
  TABLE_DEFINITION__TABLE_TYPE__ARRAY = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TABLE_DEFINITION__TABLE_TYPE)
} TableDefinition__TableType;
typedef enum _TableStatus {
  TABLE_STATUS__SUCCESS = 0,
  TABLE_STATUS__TABLE_NOT_FOUND = 1,
  TABLE_STATUS__ENTRY_NOT_FOUND = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TABLE_STATUS)
} TableStatus;

/* --- messages --- */

struct  TablesListRequest
{
  ProtobufCMessage base;
};
#define TABLES_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tables_list_request__descriptor) \
     }


struct  TablesListReply
{
  ProtobufCMessage base;
  size_t n_entries;
  TableDefinition **entries;
};
#define TABLES_LIST_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tables_list_reply__descriptor) \
    , 0,NULL }


struct  TableDefinition
{
  ProtobufCMessage base;
  char *table_name;
  TableDefinition__TableType table_type;
  uint32_t key_size;
  uint32_t value_size;
  uint32_t max_entries;
};
#define TABLE_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_definition__descriptor) \
    , NULL, TABLE_DEFINITION__TABLE_TYPE__UNSPEC, 0, 0, 0 }


struct  TableListRequest
{
  ProtobufCMessage base;
  char *table_name;
};
#define TABLE_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_list_request__descriptor) \
    , NULL }


struct  TableListReply
{
  ProtobufCMessage base;
  TableStatus status;
  TableDefinition *entry;
  protobuf_c_boolean has_n_items;
  uint32_t n_items;
  protobuf_c_boolean has_items;
  ProtobufCBinaryData items;
};
#define TABLE_LIST_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_list_reply__descriptor) \
    , TABLE_STATUS__SUCCESS, NULL, 0, 0, 0, {0,NULL} }


struct  TableEntryGetRequest
{
  ProtobufCMessage base;
  char *table_name;
  ProtobufCBinaryData key;
};
#define TABLE_ENTRY_GET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_entry_get_request__descriptor) \
    , NULL, {0,NULL} }


struct  TableEntryGetReply
{
  ProtobufCMessage base;
  TableStatus status;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define TABLE_ENTRY_GET_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_entry_get_reply__descriptor) \
    , TABLE_STATUS__SUCCESS, 0, {0,NULL}, 0, {0,NULL} }


struct  TableEntryInsertRequest
{
  ProtobufCMessage base;
  char *table_name;
  ProtobufCBinaryData key;
  ProtobufCBinaryData value;
};
#define TABLE_ENTRY_INSERT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_entry_insert_request__descriptor) \
    , NULL, {0,NULL}, {0,NULL} }


struct  TableEntryInsertReply
{
  ProtobufCMessage base;
  TableStatus status;
};
#define TABLE_ENTRY_INSERT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_entry_insert_reply__descriptor) \
    , TABLE_STATUS__SUCCESS }


struct  TableEntryDeleteRequest
{
  ProtobufCMessage base;
  char *table_name;
  ProtobufCBinaryData key;
};
#define TABLE_ENTRY_DELETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_entry_delete_request__descriptor) \
    , NULL, {0,NULL} }


struct  TableEntryDeleteReply
{
  ProtobufCMessage base;
  TableStatus status;
};
#define TABLE_ENTRY_DELETE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_entry_delete_reply__descriptor) \
    , TABLE_STATUS__SUCCESS }


/* TablesListRequest methods */
void   tables_list_request__init
                     (TablesListRequest         *message);
size_t tables_list_request__get_packed_size
                     (const TablesListRequest   *message);
size_t tables_list_request__pack
                     (const TablesListRequest   *message,
                      uint8_t             *out);
size_t tables_list_request__pack_to_buffer
                     (const TablesListRequest   *message,
                      ProtobufCBuffer     *buffer);
TablesListRequest *
       tables_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tables_list_request__free_unpacked
                     (TablesListRequest *message,
                      ProtobufCAllocator *allocator);
/* TablesListReply methods */
void   tables_list_reply__init
                     (TablesListReply         *message);
size_t tables_list_reply__get_packed_size
                     (const TablesListReply   *message);
size_t tables_list_reply__pack
                     (const TablesListReply   *message,
                      uint8_t             *out);
size_t tables_list_reply__pack_to_buffer
                     (const TablesListReply   *message,
                      ProtobufCBuffer     *buffer);
TablesListReply *
       tables_list_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tables_list_reply__free_unpacked
                     (TablesListReply *message,
                      ProtobufCAllocator *allocator);
/* TableDefinition methods */
void   table_definition__init
                     (TableDefinition         *message);
size_t table_definition__get_packed_size
                     (const TableDefinition   *message);
size_t table_definition__pack
                     (const TableDefinition   *message,
                      uint8_t             *out);
size_t table_definition__pack_to_buffer
                     (const TableDefinition   *message,
                      ProtobufCBuffer     *buffer);
TableDefinition *
       table_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_definition__free_unpacked
                     (TableDefinition *message,
                      ProtobufCAllocator *allocator);
/* TableListRequest methods */
void   table_list_request__init
                     (TableListRequest         *message);
size_t table_list_request__get_packed_size
                     (const TableListRequest   *message);
size_t table_list_request__pack
                     (const TableListRequest   *message,
                      uint8_t             *out);
size_t table_list_request__pack_to_buffer
                     (const TableListRequest   *message,
                      ProtobufCBuffer     *buffer);
TableListRequest *
       table_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_list_request__free_unpacked
                     (TableListRequest *message,
                      ProtobufCAllocator *allocator);
/* TableListReply methods */
void   table_list_reply__init
                     (TableListReply         *message);
size_t table_list_reply__get_packed_size
                     (const TableListReply   *message);
size_t table_list_reply__pack
                     (const TableListReply   *message,
                      uint8_t             *out);
size_t table_list_reply__pack_to_buffer
                     (const TableListReply   *message,
                      ProtobufCBuffer     *buffer);
TableListReply *
       table_list_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_list_reply__free_unpacked
                     (TableListReply *message,
                      ProtobufCAllocator *allocator);
/* TableEntryGetRequest methods */
void   table_entry_get_request__init
                     (TableEntryGetRequest         *message);
size_t table_entry_get_request__get_packed_size
                     (const TableEntryGetRequest   *message);
size_t table_entry_get_request__pack
                     (const TableEntryGetRequest   *message,
                      uint8_t             *out);
size_t table_entry_get_request__pack_to_buffer
                     (const TableEntryGetRequest   *message,
                      ProtobufCBuffer     *buffer);
TableEntryGetRequest *
       table_entry_get_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_entry_get_request__free_unpacked
                     (TableEntryGetRequest *message,
                      ProtobufCAllocator *allocator);
/* TableEntryGetReply methods */
void   table_entry_get_reply__init
                     (TableEntryGetReply         *message);
size_t table_entry_get_reply__get_packed_size
                     (const TableEntryGetReply   *message);
size_t table_entry_get_reply__pack
                     (const TableEntryGetReply   *message,
                      uint8_t             *out);
size_t table_entry_get_reply__pack_to_buffer
                     (const TableEntryGetReply   *message,
                      ProtobufCBuffer     *buffer);
TableEntryGetReply *
       table_entry_get_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_entry_get_reply__free_unpacked
                     (TableEntryGetReply *message,
                      ProtobufCAllocator *allocator);
/* TableEntryInsertRequest methods */
void   table_entry_insert_request__init
                     (TableEntryInsertRequest         *message);
size_t table_entry_insert_request__get_packed_size
                     (const TableEntryInsertRequest   *message);
size_t table_entry_insert_request__pack
                     (const TableEntryInsertRequest   *message,
                      uint8_t             *out);
size_t table_entry_insert_request__pack_to_buffer
                     (const TableEntryInsertRequest   *message,
                      ProtobufCBuffer     *buffer);
TableEntryInsertRequest *
       table_entry_insert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_entry_insert_request__free_unpacked
                     (TableEntryInsertRequest *message,
                      ProtobufCAllocator *allocator);
/* TableEntryInsertReply methods */
void   table_entry_insert_reply__init
                     (TableEntryInsertReply         *message);
size_t table_entry_insert_reply__get_packed_size
                     (const TableEntryInsertReply   *message);
size_t table_entry_insert_reply__pack
                     (const TableEntryInsertReply   *message,
                      uint8_t             *out);
size_t table_entry_insert_reply__pack_to_buffer
                     (const TableEntryInsertReply   *message,
                      ProtobufCBuffer     *buffer);
TableEntryInsertReply *
       table_entry_insert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_entry_insert_reply__free_unpacked
                     (TableEntryInsertReply *message,
                      ProtobufCAllocator *allocator);
/* TableEntryDeleteRequest methods */
void   table_entry_delete_request__init
                     (TableEntryDeleteRequest         *message);
size_t table_entry_delete_request__get_packed_size
                     (const TableEntryDeleteRequest   *message);
size_t table_entry_delete_request__pack
                     (const TableEntryDeleteRequest   *message,
                      uint8_t             *out);
size_t table_entry_delete_request__pack_to_buffer
                     (const TableEntryDeleteRequest   *message,
                      ProtobufCBuffer     *buffer);
TableEntryDeleteRequest *
       table_entry_delete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_entry_delete_request__free_unpacked
                     (TableEntryDeleteRequest *message,
                      ProtobufCAllocator *allocator);
/* TableEntryDeleteReply methods */
void   table_entry_delete_reply__init
                     (TableEntryDeleteReply         *message);
size_t table_entry_delete_reply__get_packed_size
                     (const TableEntryDeleteReply   *message);
size_t table_entry_delete_reply__pack
                     (const TableEntryDeleteReply   *message,
                      uint8_t             *out);
size_t table_entry_delete_reply__pack_to_buffer
                     (const TableEntryDeleteReply   *message,
                      ProtobufCBuffer     *buffer);
TableEntryDeleteReply *
       table_entry_delete_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_entry_delete_reply__free_unpacked
                     (TableEntryDeleteReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TablesListRequest_Closure)
                 (const TablesListRequest *message,
                  void *closure_data);
typedef void (*TablesListReply_Closure)
                 (const TablesListReply *message,
                  void *closure_data);
typedef void (*TableDefinition_Closure)
                 (const TableDefinition *message,
                  void *closure_data);
typedef void (*TableListRequest_Closure)
                 (const TableListRequest *message,
                  void *closure_data);
typedef void (*TableListReply_Closure)
                 (const TableListReply *message,
                  void *closure_data);
typedef void (*TableEntryGetRequest_Closure)
                 (const TableEntryGetRequest *message,
                  void *closure_data);
typedef void (*TableEntryGetReply_Closure)
                 (const TableEntryGetReply *message,
                  void *closure_data);
typedef void (*TableEntryInsertRequest_Closure)
                 (const TableEntryInsertRequest *message,
                  void *closure_data);
typedef void (*TableEntryInsertReply_Closure)
                 (const TableEntryInsertReply *message,
                  void *closure_data);
typedef void (*TableEntryDeleteRequest_Closure)
                 (const TableEntryDeleteRequest *message,
                  void *closure_data);
typedef void (*TableEntryDeleteReply_Closure)
                 (const TableEntryDeleteReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    table_status__descriptor;
extern const ProtobufCMessageDescriptor tables_list_request__descriptor;
extern const ProtobufCMessageDescriptor tables_list_reply__descriptor;
extern const ProtobufCMessageDescriptor table_definition__descriptor;
extern const ProtobufCEnumDescriptor    table_definition__table_type__descriptor;
extern const ProtobufCMessageDescriptor table_list_request__descriptor;
extern const ProtobufCMessageDescriptor table_list_reply__descriptor;
extern const ProtobufCMessageDescriptor table_entry_get_request__descriptor;
extern const ProtobufCMessageDescriptor table_entry_get_reply__descriptor;
extern const ProtobufCMessageDescriptor table_entry_insert_request__descriptor;
extern const ProtobufCMessageDescriptor table_entry_insert_reply__descriptor;
extern const ProtobufCMessageDescriptor table_entry_delete_request__descriptor;
extern const ProtobufCMessageDescriptor table_entry_delete_reply__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Table_2eproto__INCLUDED */
